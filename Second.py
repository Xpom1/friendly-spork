import asyncio
import aiohttp
import time
from bs4 import BeautifulSoup as BS
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as ec
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium import webdriver
import sys
from random import randint



def Gen_Id_Brauzer():
    capa = DesiredCapabilities.CHROME
    capa["pageLoadStrategy"] = "none"
    options = webdriver.ChromeOptions()
    options.add_argument("start-maximized")
    options.add_argument("--headless")
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option('useAutomationExtension', False)
    driver = webdriver.Chrome(options=options, executable_path=r"D:\Pycharm\work\chromedriver\chromedriver.exe",
                              desired_capabilities=capa)
    wait = WebDriverWait(driver, 20)
    driver.set_window_size(1920, 1080)
    return driver, wait

start_time = time.time()
predmet = {}
async def get_page_data(session, id, proxy):
    url = f'https://URL{id.replace("_", "-")}'
    async with session.get(url, proxy=proxy) as respons:
        assert respons.status == 200
        respons_text = await respons.text()
        soup = BS(respons_text, 'lxml')
        try:
            name = ' '.join(soup.find(class_="item-h1").text.split())
        except:
            name = "404"
        try:
            price = soup.find(class_="ip-bestprice").text.strip() + "₽"
        except:
            price = "SOLD"
        predmet[id] = []
        if name != "404":
            if '★' in name.split()[0]:
                driver, wait = Gen_Id_Brauzer()
                driver.get(url)
                wait.until(ec.presence_of_element_located((By.XPATH, '/html/body/div[2]/footer/div[1]')))
                driver.execute_script("window.stop();")
                WebDriverWait(driver, 100).until(ec.element_to_be_clickable((By.XPATH, "/html/body/div[2]/section/div[1]/div[2]/div[2]/div[5]/a"))).click()
                WebDriverWait(driver, 100).until(ec.element_to_be_clickable((By.XPATH, "/html/body/div[2]/section/div[1]/div[2]/div[2]/div[8]/p")))
                flor = driver.find_element_by_xpath('/html/body/div[2]/section/div[1]/div[2]/div[2]/div[8]/p').text
                predmet.get(id).append(name)
                predmet.get(id).append(price)
                predmet.get(id).append(flor)
            else:
                predmet.get(id).append(name)
                predmet.get(id).append(price)
                try:
                    stikers = soup.find(id="sticker_info").text.replace('Наклейка: ', '').split(', ')
                except:
                    stikers = "Наклеек нет"
                predmet.get(id).append(stikers)
        print(url, proxy)
        return respons_text

async def load_site_data():
    proxies = []
    with open("message.txt") as file_handler:
        for line in file_handler:
            proxy = line.strip().split(':')
            proxies.append(f'http://{proxy[2]}:{proxy[3]}@{proxy[0]}:{proxy[1]}')
    nomber = 0
    async with aiohttp.ClientSession() as session:
        tasks = []
        col_vo = 20
        timeout = 0
        spis = ['2964720103_188530248', '4400166743_188530139', '4168654882_302028390', '4803321512_519977179', '4163679827_302028390', '520035664_902679193', '4643851042_480085569', '4804853089_188530139', '3540855046_302028390', '4804257907_188530139', '3609163105_188530139', '4484362454_188530139', '3536772352_302028390', '4804255936_0', '4142174526_302028390', '4430792865_188530139', '4364232388_302028390', '3526823995_302028390', '4364298993_302028390', '4151628736_302028390', '3576790111_302028390', '4164352893_188530170', '4803308674_188530139', '4159369147_188530139', '4375461891_302028390', '4144689706_188530139', '4159254859_302028390', '4429003397_302028390', '3528086695_302028390', '4669232554_188530170', '3535832148_302028390', '4310996821_302028390', '4750605692_188530139', '4705132682_188530139', '483490126_188530170', '4788699847_188530139', '4210199399_302028390', '4654874806_188530139', '4355343977_519977179', '4796983881_188530139', '3707370686_302028390', '4749405071_188530139', '4625376481_302028390', '469478415_188530292', '310779180_302028390', '3550368528_302028390', '4437685519_302028390', '4755345330_519977179', '638423530_188530139', '3542038129_188530139', '4798027796_188530139', '4804853091_188530170', '4722515732_188530139', '3571237216_302028390', '4800164865_302028390', '4461935933_188530139', '3567366879_188530170', '3513892114_188530139', '4807491964_480085569', '3818491254_188530139', '2398219177_302028390', '4325527012_188530139', '4401057176_302028390', '4412453467_302028390', '4374151843_302028390', '4550033988_480085569', '4804255087_519977179', '3534051286_302028390', '4395477951_302028390', '4802321252_902658099', '3580352657_302028390', '4379323036_188530139', '4364700000_302028390', '3619393055_188530139', '3752145374_188530139', '4429552694_302028390', '4633494773_188530170', '3694464356_480085569', '4787002914_188530139', '4804271512_480085569', '4804271237_188530139', '4448080865_302028390', '4804883715_188530139', '4589306537_188530139', '4261970040_188530139', '4804661207_188530139', '3677131699_188530139', '4369051818_302028390', '4364250989_302028390', '4341189181_188530139', '3526505576_302028390', '3578657234_188530139', '4581489744_188530170', '4803981370_188530139', '3553437978_302028390', '4804255825_143865972', '3575291728_302028390', '4745125294_188530139', '4489073821_188530139', '4616549480_188530170', '4516134473_188530139', '3546193643_302028390', '3645938975_302028390', '3431378441_188530139', '3576392743_302028390', '4804853090_519977179', '3497528513_302028390', '4808912866_519977179', '4805033956_188530170', '4590310701_188530139', '3528407312_188530139', '4712745914_188530139', '4364234153_302028390', '4800163839_302028390', '4409670988_188530139', '4141836913_519977179', '4678880937_188530139', '3196422624_188530139', '4804064600_188530170', '4319026870_302028390', '4743047686_480085569', '1703200021_188530398', '4448025538_302028390', '4364232399_302028390', '4632968198_188530139', '4340920771_188530139', '4793509088_188530139', '4755574006_480085569', '4805034023_188530170', '3545742756_302028390', '4316161726_302028390', '572260522_0', '4765640415_188530139', '4439733457_302028390', '4245431131_302028390', '3927210818_302028390', '4698493711_188530139', '3626842298_302028390', '4618203467_188530139', '3558334791_188530139', '4306034544_188530170', '4307068529_188530139', '4313935830_188530139', '3518384511_302028390', '4644880955_480085569', '4449557701_302028390', '4448084051_302028390', '1626194840_188530139', '4804291831_188530139', '3718333930_302028390', '4749595432_188530139', '4304849662_480085569', '4403025759_302028390', '3707106501_302028390', '4429550738_302028390', '4808133925_188530139', '4804832894_188530170', '4465246830_188530139', '3575831984_188530139', '4364229498_302028390', '4797990420_188530139', '4246143660_302028390', '4619560618_188530139', '4804277314_188530139', '4397866222_188530139', '3911016402_188530170', '4772438040_188530139', '3560232891_188530139', '4793987743_188530139', '4788009156_480085569', '4804263466_188530139', '3734478378_302028390', '4364570548_302028390', '3598248604_302028390', '4640316568_188530139', '4711180307_188530170', '4776096906_188530139', '3620131316_302028390', '4798650373_188530139', '4791794261_480085569', '4221280355_302028390', '4801328987_188530139', '3526620861_302028390', '4333907606_188530139', '4801382454_519977179', '4448080260_302028390', '3359898293_188530139', '3627363902_302028390', '4789711510_188530139', '4772470180_188530139', '4678954758_188530170', '4786621508_480085569', '4707489650_188530139', '3639691730_302028390', '4319196870_302028390', '4364855114_302028390', '4805034078_188530170', '3770712717_902658099', '3961030827_302028390', '4785482445_188530139', '1704740299_902658099', '4339064345_188530139', '3612840267_188530721', '4448079415_302028390', '4372967082_188530170', '3609276042_302028390', '4804733313_188530139', '3530845648_302028390', '4791783104_188530139', '3608109011_188532375', '4773977539_188530139', '4804278102_188530139', '4245552980_302028390', '4167909375_302028390', '3632708082_188530139', '4760050199_188530139', '4799366967_188530139', '4708247084_188530139', '4777909220_188530139', '3502220969_302028390', '4376892598_302028390', '4362392154_188530139', '4805032992_188530170', '4150939872_302028390', '4640446768_188530139', '4334914751_188530139', '4361014308_302028390', '4567296924_188530139', '1563040510_188530139', '4804884798_519977179', '3803155620_302028390', '3672717919_302028390', '3510093096_302028390', '4281806758_188530139', '717824819_188530139', '3676077631_188530139', '4185096972_302028390', '3638474651_188530139', '3791770927_302028390', '4776132194_302028390', '4741330623_188530139', '4742452962_188530139', '4789214876_188530139', '4802978004_188530139', '4253388003_302028390', '3539079502_188530139', '3538662510_188530139', '4320272272_302028390', '4782437718_188530139', '4400068305_188530139', '4783340789_188530139', '4748540757_188530170', '469548722_188530139', '4802605547_188530139', '4397088777_302028390', '3665816668_302028390', '4440074730_188530139', '4313159408_302028390', '4450283472_302028390', '3777730128_188530139', '4305168922_188530139', '2454484569_188530139', '4640185143_188530139', '4358526712_188530139', '4803981018_188530139', '4800540667_188530139', '4578725114_188607754', '1225722010_188530139', '4804592381_480085569', '4804255315_480085569', '4322359369_480085569', '4437684616_302028390', '4755282777_480085569', '4713070435_188530139', '4808133915_188530139', '4704695583_188530170', '4312472986_188530139', '4803320566_188530170', '4378245401_302028390', '3988638988_302028390', '4422342743_188530139', '4581444088_188530139', '4599241799_188530139', '4755573997_188530139', '4794326102_188530139', '4364557885_302028390', '4695334783_188530170', '4353628649_188530139', '4579678144_188530139', '4651302401_188530139', '4118914150_302028390', '4802602780_188530139', '3711430482_188530139', '4724164923_188530139', '4451533717_302028390', '4800862035_188530170', '4808133917_188530170', '4788826987_188530139', '4801416556_188530170', '4761255428_188530139', '4796967281_188530139', '4789023779_188530170', '4786735292_188530139', '4364234023_302028390', '4429262672_302028390', '4782375157_188530139', '4563231248_188530139', '3550116997_302028390', '4416710350_188530139', '4757845933_188530139', '4362325203_302028390', '4800300652_188530170', '4525960141_188530139']

        while len(spis) > 0:
            print(len(spis))
            if len(spis) < col_vo:
                for id in range(len(spis)):
                    task = asyncio.create_task(get_page_data(session, spis[id], proxies[randint(0, len(proxies) - 1)]))
                    tasks.append(task)
                await asyncio.gather(*tasks)
                del spis[:len(spis)]
            else:
                for id in range(col_vo):
                    task = asyncio.create_task(get_page_data(session, spis[id], proxies[randint(0, len(proxies) - 1)]))
                    tasks.append(task)
                await asyncio.gather(*tasks)
                del spis[:col_vo]
            await asyncio.sleep(timeout)


        # for id in range(len(spis)):
        #     task = asyncio.create_task(get_page_data(session, spis[id]))
        #     tasks.append(task)
        #     if len(tasks) == col_vo:
        #         await asyncio.gather(*tasks)
        #         tasks = []
        #         await asyncio.sleep(3)

        # while len(spis) > 0:
        #     if len(spis) < col_vo:
        #         for id in range(len(spis)):
        #             task = asyncio.create_task(get_page_data(session, spis[id], proxies[randint(0, len(proxies) - 1)]))
        #             tasks.append(task)
        #         await asyncio.gather(*tasks)
        #         del spis[:len(spis)]
        #
        #         await asyncio.sleep(timeout)
        #     else:
        #         for id in range(col_vo):
        #             task = asyncio.create_task(get_page_data(session, spis[id], proxies[randint(0, len(proxies) - 1)]))
        #             tasks.append(task)
        #         await asyncio.gather(*tasks)
        #         del spis[:col_vo]
        #         await asyncio.sleep(timeout)

        # for id in range(len(spis)):
        #     task = asyncio.create_task(get_page_data(session, spis[id], proxies[randint(0, len(proxies))]))
        #     tasks.append(task)
        #     if len(tasks) == col_vo:
        #         await asyncio.gather(*tasks)
        #         tasks = []
        #         await asyncio.sleep(0.1)


        end_time = time.time() - start_time
        print(f"\n{end_time}")


if sys.platform == 'win32':
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
asyncio.get_event_loop().run_until_complete(load_site_data())
print(predmet)

# st = time.time()
# names = []
# async def text(https):
#     name = ' '.join(BS(https, 'html.parser').find(class_="item-h1").text.split())
#     names.append(name)
#     print(name)
#     return name
#
# async def perebor():
#     tasks = []
#     for https in all_data:
#         task = asyncio.create_task(text(https))
#         tasks.append(task)
#     await asyncio.gather(*tasks)
#
# asyncio.get_event_loop().run_until_complete(perebor())
#
# ed = time.time() - st
# print(f"\n{ed}")

# st = time.time()
# for i in all_data:
#     soup = BS(i, 'html.parser')
#     name = ' '.join(soup.find(class_="item-h1").text.split())
#     print(name)
#     try:
#         print(soup.find(id="sticker_info").text.replace('Наклейка: ', '').split(', '))
#     except:
#         print("Наклеек нет")
# ed = time.time() - st
# print(f"\n{ed}\n")


